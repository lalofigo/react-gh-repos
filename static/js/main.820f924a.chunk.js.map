{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CommitsList","react_default","a","createElement","this","props","list","map","commits","author","message","React","Component","RepoList","context","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleShow","bind","assertThisInitialized","handleClose","state","show","modalTitle","repoName","setState","_this2","target","_ref","title","queryString","getAttribute","slice","fetch","headers","Accept","then","response","json","console","log","forEach","commit","data","name","concat","catch","err","Error","_this3","className","repository","data-url","commits_url","onClick","Modal_default","onHide","Header","closeButton","Title","Body","App_CommitsList","repo","SearchForm","_this4","query","repos","doSearch","handleChange","_ref2","value","_this5","items","type","onChange","placeholder","buttonText","App_RepoList","text","App","App_Title","App_SearchForm","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.820f924a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport $ from '../node_modules/jquery/src/jquery';\nimport '../node_modules/bootstrap/dist/js/bootstrap.min.js';\nimport Modal from 'react-bootstrap/lib/Modal';\n\nconst API = \"https://api.github.com/search/repositories?sort=updated&order=desc&q=\";\nconst API_COMMITS = \"https://api.github.com/search/commits?sort=committer-date&order=desc&q=repo:\";\n\nclass CommitsList extends React.Component{\n  render(){  \n    /*console.log(this.props.list)*/\n    return (\n       <div>\n         { this.props.list.map(commits => <p>{commits.author} : {commits.message}</p>)}\n       </div> \n      )}    \n}\n\nclass RepoList extends React.Component{\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleShow = this.handleShow.bind(this)\n    this.handleClose = this.handleClose.bind(this)\n\n    this.state = {\n      show: false,\n      modalTitle: \"\",\n      repoName: \"\",\n      commits:[ ]\n    }\n  }\n\n  handleClose() {\n    this.setState({ show: false })\n  }\n\n  handleShow({ target }) {\n    this.setState({ show: true })\n    this.setState({ modalTitle: target.title })\n    this.setState({ repoName: target.title })\n    \n    /*let queryString = `${API_COMMITS}${target.title}`*/\n    let queryString = target.getAttribute('data-url')\n    queryString = queryString.slice(0, -6);\n    /*console.log(queryString)*/\n    this.setState({commits:[ ]})\n    fetch(queryString,\n         {headers: {\n              'Accept': 'application/vnd.github.cloak-preview'\n                    }\n         })\n\t\t\t.then(response => response.json() )\n\t\t\t.then(commits => {\n       console.log(commits)\n\t\t\t\tcommits.forEach( commit => {\n         \n          let data ={\n            author : commit.commit.author.name,\n            message : commit.commit.message\n          }\n          \n          this.setState({commits : this.state.commits.concat([data]) })\n          \n        })\n\t\t})\n\t\t.catch((err) => {\n\t\t\tthrow new Error('Error: Not possible to fetch data');\n\t\t})\n  }\n    \n  render(){  \n    /*console.log(this.props.list)*/\n    return (\n       <div className=\"container-results\">\n         { this.props.list.map( (repository) => \n                               (<div className=\"results\"> <h3 title={repository.name} \n                                   data-url={repository.commits_url}                                                                onClick={this.handleShow}> {repository.name} </h3></div>)\n                              )\n         }\n        \n        <Modal show={this.state.show} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>{this.state.modalTitle}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div> <CommitsList repo ={this.state.modalTitle} list={this.state.commits}/> </div>\n          </Modal.Body>\n        </Modal>\n        </div>\n       \n    )  \n  }\n}\nclass SearchForm extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      query: '',\n      repos:[ ]\n    }\n    this.doSearch = this.doSearch.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n  }\n  \n  handleChange({ target }) {\n    this.setState({\n      query : target.value\n    });\n  }\n  \n  doSearch(){\n    let queryString = `${API}${this.state.query}`\n    /*console.log(queryString)*/\n    this.setState({repos:[ ]})\n    fetch(queryString)\n\t\t\t.then(response => response.json() )\n\t\t\t.then(repos => {\n\t\t\t\trepos.items.forEach( repo => {\n          let data ={\n            name : repo.name,\n            commits_url: repo.commits_url\n          }\n          this.setState({repos : this.state.repos.concat([data]) })\n        })\n\t\t})\n\t\t.catch((err) => {\n\t\t\tthrow new Error('Error: Not possible to fetch data');\n\t\t})\n  }\n  \n  render(){\n    return <div className=\"search\">\n            <input type=\"text\" value={this.state.query} onChange={this.handleChange} placeholder=\"Type here\"></input>\n            <button onClick={this.doSearch}>{this.props.buttonText}</button>\n            <RepoList list={this.state.repos}/>\n           </div> \n  }\n}\n\nclass Title extends React.Component{\n  render(){\n    return <h2>{this.props.text}</h2>\n  }\n}\n\nclass App extends React.Component{\n  render(){\n    return <div>\n            <Title />\n            <SearchForm />\n           </div>\n  }\n}\n\nTitle.defaultProps = {\n  text: \"Search Repos in Github\"\n}\n\nSearchForm.defaultProps = {\n  buttonText: \"Search\"\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}